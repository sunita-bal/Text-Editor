{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","placeholder","backgroundColor","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","filter","elem","replace","Alert","height","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.03dcf6c4.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {FaGgCircle} from 'react-icons/fa';\r\n// import {a} from \"react-router-dom\"\r\n\r\nexport default function Navbar(props){\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <span className=\"large ms-4\"><FaGgCircle/></span>\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n      \r\n        <li className=\"nav-item \">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n       \r\n       \r\n      </ul> \r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-danger\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label plus\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    )\r\n}\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    textMe: PropTypes.string\r\n    }\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n    \r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to uppercase\",\"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"converted to lowercase\",\"success\");\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"all cleared\",\"success\");\r\n    }\r\n    const handleCopy = ()=>{\r\n        var text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"copied successfully\",\"success\");\r\n    }\r\n    const handleSpace = ()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\"\"))\r\n        props.showAlert(\"spaces deleted\",\"success\");\r\n    }\r\n     const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const[text, setText] = useState('');\r\n    \r\n    \r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h1 className=\"mb-4\">{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\"  placeholder=\"Enter a text\" style={{backgroundColor:props.mode==='dark'?'rgb(14,24,42)':'white', color:props.mode==='dark'?'white':'#042743'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button disabled={text.length===0} className=\"btn btn-info mx-2 my-2\" onClick={handleUpClick}><strong>Uppercase</strong></button>\r\n            <button disabled={text.length===0} className=\"btn btn-info mx-2 my-2\" onClick={handleLoClick}><strong>Lowercase</strong></button>\r\n            <button disabled={text.length===0} className=\"btn btn-info mx-2 my-2\" onClick={handleClearClick}><strong>Clear</strong></button>\r\n            <button disabled={text.length===0} className=\"btn btn-info mx-2 my-2\" onClick={handleCopy}><strong>Copy</strong></button>\r\n            <button disabled={text.length===0} className=\"btn btn-info mx-2 my-2\" onClick={handleSpace}><strong>Remove Spaces</strong></button>\r\n            \r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(/\\s+/).filter((elem)=>{return elem.length!==0}).length}words and {text.replace(/\\s/g, '').length}characters</p>\r\n            <p>{0.008* text.split(\" \").filter((elem)=>{return elem.length!==0}).length } Minutes read</p>\r\n            <h2>preview</h2>\r\n            <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\n function Alert(props) {\r\n     const capitalize = (word)=>{\r\n         const lower = word.toLowerCase();\r\n         return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n\r\n     }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"close\"></button>    \r\n            </div>}\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Alert;","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, {useState} from 'react'\n// import About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode , setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\nconst showAlert = (message,type)=>{\nsetAlert({\n    msg:message,\n    type:type\n  })\n  setTimeout(()=>{\n    setAlert(null);\n  }, 2000);\n}\n\n  const toggleMode = ()=>{\n    if( mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor= '#042743';\n      showAlert(\"Dark mode ON\",\"success\");\n      // document.title = 'TextUtlis - Dark Mode';\n      // setInterval(()=>{\n      //   document.title='install this App';\n      // }, 1000);\n      //  setInterval(()=>{\n      //   document.title='load this page';\n      // }, 1500);\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor= 'white';\n      showAlert(\"Dark mode OFF\",\"success\");\n      // document.title = 'TextUtlis - light Mode';\n    }\n  }\n  return (\n   <>\n   {/* <Navbar/> */}\n{/* <Router> */}\n <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n <Alert alert={alert}/>\n <div className=\"container my-3\">\n {/* <Switch> */}\n          {/* <Route path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route path=\"/\"> */}\n          {/* </Route> */}\n        {/* </Switch> */}\n        <TextForm showAlert={showAlert} heading=\"TextUtlis - Text Editor, Word Counter, Character Counter\" mode={mode}/>\n        {/* </About> */}\n </div>\n// {/* </Router> */}\n \n   </>\n   \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}